#include <iostream>

enum SortingStrategy {
	BUBBLE_SORT,
	SELECTION_SORT,
};

struct SortingOption {
	SortingStrategy strategy;
	void (*sortfunction)(int *, int);
};

	void BubbleSort(int *arr, int size){
            for(int i = 0; i < size-1; ++i){
	        for(int j =0; j < size - 1 - i; ++j){
	            if(arr[j] > arr[j + 1]){
	            int temp = arr[j];
	            arr[j] = arr[j + 1];
	            arr[j + 1] = temp;
	            }
	        }
	    }
	}

	void SelectionSort(int *arr, int size){
	    for(int i = 0; i < size - 1; ++i){
	    int min_index = i;
		for(int j = i + 1; j < size; ++j){
	            if(arr[min_index] > arr[j]){
	            min_index = j;
		    }
		}
	    	int temp = arr[i];
		arr[i] = arr[min_index];
		arr[min_index] = temp; 
	    }
	}

int main() {

SortingOption sortopt[] = {{BUBBLE_SORT, BubbleSort}, {SELECTION_SORT, SelectionSort}};

std::cout << "Select sorting algorithm: " << std::endl;
std::cout << "1. Bubble Sort" << std::endl;
std::cout << "2. Selection Sort" << std::endl;

int choice;
std::cout << "Enter your choice: ";
std::cin >> choice;

SortingOption selectedOption = sortopt[choice - 1];

int arr[] = {6, 42, 9, 27, 1, 5};
int size = sizeof(arr)/sizeof(arr[0]);

std::cout << "Original array: " << std::endl;
for(int i = 0; i < size; ++i){
std::cout << arr[i] << " ";
}

std::cout << std::endl;

selectedOption.sortfunction(arr, size);

std::cout << "Sorted array using ";
switch(selectedOption.strategy){
	case BUBBLE_SORT : {
	std::cout << "Bubble Sort: ";
	break;
	}
	case SELECTION_SORT : {
	std::cout << "Selection Sort: ";
	break;
	}
	default : {
	std::cerr << "Invalid choice";
	}
}

for(int i = 0; i < size; ++i){
std::cout << arr[i] << " ";
}

std::cout << std::endl;

}
